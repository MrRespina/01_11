db.companies.find({'funding_rounds.investment.financial_org.permalink':'greylock'},{'name':1,'ipo':{'valuation_amount':1,'pub_year':1},
'funding_rounds.investment.financial_org.permalink':1,'_id':0})

# 같은 이름일 경우에 하나로 묶어서 출력 : 승격

# ipo와 funding_rounds 필드에 도달할 필드 경로를 표현해 중첩된 도큐먼트 및 배열에서 값 선택
# 이름을 지정하여 필드값을 출력할 경우에는 필드에 "$"를 붙여서 사용.

db.companies.find({'funding_rounds.investment.financial_org.permalink':'greylock'},{'name':1,valuation:'$ipo.valuation_amount',ipo:'$ipo.pub_year',
funders:'$funding_rounds.investment.financial_org.permalink','_id':0})


db.companies.find({'funding_rounds.investment.financial_org.permalink':'greylock'},{'name':1,"ipo_pub_year":'$ipo.pub_year','valuation':'$ipo.valuation_amount','funded_year':'$funding_rounds.funded_year','_id':0})
db.companies.aggregate([{$match:{'funding_rounds.investment.financial_org.permalink':'greylock'}},{$project:{'name':1,"ipo":'$ipo.pub_year','valuation':'$ipo.valuation_amount','funded_year':'$funding_rounds.funded_year','_id':0}}])

# unwind : 지정된 배열 필드의 각 요소에 대해 출력 도큐먼트가 하나씩 있는 출력 생성가능
db.companies.aggregate([{$match:{'funding_rounds.investment.financial_org.permalink':'greylock'}},{$unwind:'$funding_rounds'},{$project:{'name':1,"ipo":'$ipo.pub_year','valuation':'$ipo.valuation_amount','funded_year':'$funding_rounds.funded_year','_id':0}}])


db.companies.find({'funding_rounds.investment.financial_org.permalink':'greylock'},{'name':1,"ipo":'$ipo.pub_year','valuation':'$ipo.valuation_amount','funded_year':'$funding_rounds.funded_year','_id':0})
db.companies.aggregate([{$match:{'funding_rounds.investment.financial_org.permalink':'greylock'}},{$project:{'name':1,"ipo":'$ipo.pub_year','amount':'$ipo.valuation_amount','year':'$funding_rounds.funded_year','_id':0}}])
db.companies.aggregate([{$match:{'funding_rounds.investment.financial_org.permalink':'greylock'}},{$unwind:'$funding_rounds'},{$project:{'name':1,"ipo":'$ipo.pub_year','amount':'$ipo.valuation_amount','year':'$funding_rounds.funded_year','_id':0}}])


db.companies.find({'funding_rounds.investment.financial_org.permalink':'greylock'},{'name':1,"raised_amount":'$funding_rounds.raised_amount','year':'$funding_rounds.funded_year','_id':0})
db.companies.aggregate([{$match:{'funding_rounds.investment.financial_org.permalink':'greylock'}},{$project:{'name':1,"raised_amount":'$funding_rounds.raised_amount','year':'$funding_rounds.funded_year','_id':0}}])
db.companies.aggregate([{$match:{'funding_rounds.investment.financial_org.permalink':'greylock'}},{$unwind:'$funding_rounds'},{$project:{'name':1,"raised_amount":'$funding_rounds.raised_amount','year':'$funding_rounds.funded_year','_id':0}}])


db.companies.find({'funding_rounds.investment.financial_org.permalink':'greylock','funding_rounds.raised_amount':{'$lte':100000000}},{'name':1,"raised_amount":'$funding_rounds.raised_amount','year':'$funding_rounds.funded_year','_id':0})

# match(조건절)을 여러개 주어도 된다.
db.companies.aggregate([{$match:{'funding_rounds.investment.financial_org.permalink':'greylock'}},{$match:{'funding_rounds.raised_amount':{'$lte':100000000}}},{$unwind:'$funding_rounds'}
,{$project:{'_id':0,'name':1,'year':'$funding_rounds.funded_year','id':'$funding_rounds.id','code':'$funding_rounds.round_code','amount':'$funding_rounds.raised_amount'}}])


# filter는 배열 필드일 경우에만 사용 가능.
# filter의 첫 번째 옵션은 input이며 사용할 배열을 지정, as는 input에 대한 별명을 지정, cond는 condition의 약자로 input에 대한 조건을 준다.
# cond에 조건을 사용하는 경우 as에 있는 변수명을 사용할 때 '$$'를 사용해야 함.

db.companies.aggregate([{$match:{'funding_rounds.investment.financial_org.permalink':'greylock'}},{$project:{_id:0,name:1,funded_year:1,rounds: { $filter : {input:'$funding_rounds',as:'round',cond:{$lte:['$$round.raised_amount',100000000]}}}}}])


# 첫 번째 라운딩과 마지막 라운딩만 꺼내기
# 배열에 있는 첫 번째 값과 마지막 값을 꺼내기!
db.companies.aggregate([{$match:{'founded_year':2004}},{$project:{_id:0,name:1,founded_year:1,first_round:{$arrayElemAt:['$funding_rounds',0]},last_round:{$arrayElemAt:['$funding_rounds',-1]}}}])

# funding_rounds의 1~3번 까지 가져오기
db.companies.aggregate([{$match:{'founded_year':2004}},{$project:{_id:0,name:1,founded_year:1,early_round:{$slice:['$funding_rounds',1,3]}}}])

# 배열의 크기
db.companies.aggregate([{$match:{'founded_year':2004}},{$project:{_id:0,name:1,founded_year:1,total_round:{$size:['$funding_rounds']}}}])


# 누산기 : 모든 집계함수를 누산기라고 함. sum,max,min 등 ~
db.companies.aggregate([{$match:{'founded_year':2004}},{$match:{'funding_rounds':{$exists:true,$ne:[]}}},{$project:{_id:0,name:1,founded_year:1,largest_round:{$max:'$funding_rounds.raised_amount'}}}])

db.companies.aggregate([{$match:{'founded_year':2004}},{$match:{'funding_rounds':{$exists:true,$ne:[]}}},{$project:{_id:0,name:1,founded_year:1,largest_round:{$sum:'$funding_rounds.raised_amount'}}}])

db.companies.aggregate([{$match:{'founded_year':2004}},{$match:{'funding_rounds':{$exists:true,$ne:[]}}},{$project:{_id:0,name:1,founded_year:1,largest_round:{$min:'$funding_rounds.raised_amount'}}}])

db.companies.aggregate([{$match:{'founded_year':2004}},{$match:{'funding_rounds':{$exists:true,$ne:[]}}},{$project:{_id:0,name:1,founded_year:1,largest_round:{$avg:'$funding_rounds.raised_amount'}}}])


# 그룹화
db.companies.aggregate([{$group:{'_id':{founded_year:'$founded_year'},avg_amount:{$avg:'$funding_rounds.raised_amount'}}}])

# 위의 코드는 funding_rounds가 배열이라 배열 안에 있는 값을 집계할 수 없어서 null이 나옴
# 이 문제를 해결하는 방법으로는 $unwind를 사용하여 배열을 풀어주면 된다.
db.companies.aggregate([{$unwind:'$funding_rounds'},{$group:{'_id':{founded_year:'$founded_year'},avg_amount:{$avg:'$funding_rounds.raised_amount'}}}])

# sort를 같이 써줄수도 있음.
db.companies.aggregate([{$match:{'funding_rounds.raised_amount':{$ne:null}}},{$unwind:'$funding_rounds'},{$group:{'_id':{founded_year:'$founded_year'},avg_amount:{$avg:'$funding_rounds.raised_amount'}}},{$sort:{avg_amount:-1}}])

db.companies.aggregate([{$match:{'funding_rounds.raised_amount':{$ne:null}}},{$unwind:'$funding_rounds'},{$project:{_id:0,funding_rounds:1}},{$group:{_id:'$funding_rounds',count:{$sum:1}}},{$sort:{avg_amount:-1}}])


# founded_year,name 을 출력하는 데 founded_year가 2004인 것에 대해서만 출력
db.companies.find({'founded_year':2004},{'_id':0,'founded_year':1,'name':1})

# group 연산자 사용
db.companies.aggregate([{$match:{'founded_year':{$gte:2004}}},{$group:{_id:{founded_year:'$founded_year',category_code:'$category_code'},companies:{$push:'$name'}}},{$sort:{'_id.founded_year':1}}])



# 일치

# 설립 년도가 2004인 모든 회사를 출력.
db.companies.find({'founded_year':2004})
db.companies.aggregate([{$match:{'founded_year':2004}}]) # 집계 연산을 사용할 때는 aggregate 사용!


db.companies.find({'founded_year':2004},{'name':1,'founded_year':1,'_id':0})
db.companies.aggregate([{$match:{'founded_year':2004}},{$project:{_id:0,name:1,founded_year:1}}])       # 배열 내부에 조건절을 계속 추가해줄 수 있다.


db.companies.find({'founded_year':2004},{'name':1,'founded_year':1,'_id':0}).limit(3)
db.companies.aggregate([{$match:{'founded_year':2004}},{$project:{_id:0,name:1,founded_year:1}},{$limit : 2}])


db.companies.find({'founded_year':2004},{'name':1,'founded_year':1,'_id':0}).limit(3).sort({'name':1})
db.companies.aggregate([{$match:{'founded_year':2004}},{$project:{_id:0,name:1,founded_year:1}},{$limit : 2},{$sort:{'name':1}}])


db.companies.find({'founded_year':2004},{'name':1,'founded_year':1,'_id':0}).limit(3).sort({'name':1}).skip(10)
db.companies.aggregate([{$match:{'founded_year':2004}},{$sort:{'name':1}},{$skip:1},{$project:{_id:0,name:1,founded_year:1}},{$limit : 2}])


db.companies.find({'funding_rounds.investment.financial_org.permalink':'greylock'},{'name':1,'ipo':{'valuation_amount':1,'pub_year':1},'funding_rounds.investment.financial_org.permalink':1,'_id':0})

# 같은 이름일 경우에 하나로 묶어서 출력 / 승격
db.companies.find({'funding_rounds.investment.financial_org.permalink':'greylock'},{'name':1,valuation:'$ipo.valuation_amount',ipo:'$ipo.pub_year',funders:'$funding_rounds.investment.financial_org.permalink','_id':0})


db.companies.find({},{'ipo.pub_year':1,'name':1,'_id':0}).sort({'ipo.pub_year':1})
db.companies.aggregate([{$group:{_id:{ipo_year:'$ipo.pub_year'},companies:{$push:'$name'}}},{$sort:{'$id.ipo_year':1}}])


db.companies.find({},{'name':1,'funding_rounds.raised_amount':1,'funding_rounds.funded_year':1}).sort({'funding_rounds.funded_year':1,'funding_rounds.funded_month':1,'funding_rounds.funded_day':1})
db.companies.aggregate([{$match:{'funding_rounds':{$ne:[]}}},{$unwind:'$funding_rounds'},{$group:{_id:{company:'$name'},funding:{$push:{amount:'$funding_rounds.raised_amount',year:'$funding_rounds.funded_year'}}}},{$sort:{'funding_rounds.funded_year':1,'funding_rounds.funded_month':1,'funding_rounds.funded_day':1}}])